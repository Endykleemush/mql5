//+------------------------------------------------------------------+
//|                                                        MABOL.mq5 |
//|                        Copyright 2010, MetaQuotes Software Corp. |
//|                                              http://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2010, MetaQuotes Software Corp."
#property link      "http://www.mql5.com"
#property version   "1.00"

#include <ExpertAdvisorECN.mqh>

input int    SL        =  50;    // Stop Loss distance
input int    TP        = 150;    // Take Profit distance
input int    TS        =  50;    // Trailing Stop distance
input double Risk      = 0.05;   // Risk
input int    MaxADX    = 25;
input int    BBPer     =  20;    // Bollinger Bands period
input double BBDev     =   2;    // Bollinger Bands deviation

//---
class CMyEA : public CExpertAdvisor
  {
protected:
   double            m_risk;          // size of risk
   int               m_sl;            // Stop Loss
   int               m_tp;            // Take Profit
   int               m_ts;            // Trailing Stop  
   double            m_hadx;
   int               m_BBPer;         // Bollinger Bands period     
   double            m_BBDev;         // Bollinger Bands deviation 
   int               m_hbb;           // Bollinger Bands indicator handle     
public:
   void              CMyEA();
   void             ~CMyEA();
   virtual bool      Init(string smb,ENUM_TIMEFRAMES tf); // initialization
   virtual bool      Main();                              // main function
   virtual void      OpenPosition(long dir);              // open position on signal
   virtual void      ClosePosition(long dir);             // close position on signal
   virtual long      CheckSignal(bool bEntry);            // check signal
  };

//------------------------------------------------------------------    CMyEA
void CMyEA::CMyEA() { }

//------------------------------------------------------------------    ~CMyEA
void CMyEA::~CMyEA()
{
   IndicatorRelease(m_hbb);   // delete indicator
   IndicatorRelease(m_hadx);
}

//------------------------------------------------------------------    Init
bool CMyEA::Init(string smb,ENUM_TIMEFRAMES tf)
{
   if(!CExpertAdvisor::Init(0,smb,tf)) return(false);                                // initialize parent class

   //copy parameters
   m_risk=Risk; 
   m_tp=TP; 
   m_sl=SL; 
   m_ts=TS;    
   m_BBPer = BBPer; 
   m_BBDev = BBDev;
   m_hbb=iBands(m_smb,m_tf,m_BBPer,0,m_BBDev,PRICE_CLOSE); 
   m_hadx=iADX(NULL,0,14);
                                          
   m_bInit=true; 
   return(true);                                                                     // trade allowed
}


//------------------------------------------------------------------    Main
bool CMyEA::Main() // main function
{
   if(!CExpertAdvisor::Main()) return(false); // call function of parent class

   if(Bars(m_smb,m_tf)<=100) return(false);   // if there are insufficient number of bars

   if(!CheckNewBar()) return(true);           // check new bar
                                                
   long dir;                                  // check each direction
   dir=ORDER_TYPE_BUY;
   OpenPosition(dir); ClosePosition(dir); TrailingPosition(dir,m_ts);
   dir=ORDER_TYPE_SELL;
   OpenPosition(dir); ClosePosition(dir); TrailingPosition(dir,m_ts);

   return(true);
}

//------------------------------------------------------------------    OpenPos
void CMyEA::OpenPosition(long dir)
{
// if there is an order, then exit
   if(PositionSelect(m_smb)) return;
// if there is no signal for current direction
   if(dir!=CheckSignal(true)) return;
   double lot=CountLotByRisk(m_sl,m_risk,0);
// if lot is not defined
   if(lot<=0) return;
// open position
   DealOpen(dir,lot,m_sl,m_tp);
}


//------------------------------------------------------------------    ClosePos
void CMyEA::ClosePosition(long dir)
{
// if there is no position, then exit
   if(!PositionSelect(m_smb)) return;
// if position of unchecked direction
   if(dir!=PositionGetInteger(POSITION_TYPE)) return;
// if the close signal didn't match the current position
   if(dir!=CheckSignal(false)) return;
// close position
   m_trade.PositionClose(m_smb,1);
}


//------------------------------------------------------------------    CheckSignal
long CMyEA::CheckSignal(bool bEntry)
{ 
   double adx[3],
          bbup[3],   // Array of Bollinger Bands' upper border values
          bbdn[3];   // Array of Bollinger Bands' lower border values
   
   MqlRates rt[3];   // Array of price values of last 3 bars
   
   if(CopyRates(m_smb, m_tf,0,3,rt)!=3) // Copy price values of last 3 bars to array
     { Print("CopyRates ",m_smb," history is not loaded"); return(WRONG_VALUE); }
   
   // Copy indicator values to array -- 2nd param = indicators buffers 1 = upperband -- 3rd param = start element, 0 = current bar, 4th param = number of elemnts to copy)
   if(CopyBuffer(m_hbb,1,0,2,bbup)<2 || CopyBuffer(m_hbb,2,0,2,bbdn)<2 ||CopyBuffer(m_hadx,0,0,2,adx)<2)
     { Print("CopyBuffer - no data"); return(WRONG_VALUE); }
   
   //Buy if the close breaks through the upperband and ADX high
   if(rt[1].open<bbup[1] && rt[1].close>bbup[1] && adx[1] > MaxADX)
      return(bEntry ? ORDER_TYPE_BUY:ORDER_TYPE_SELL); // condition for buy
 
   //Sell if the close breaks through the lowerband and ADX high  
   if(rt[1].open>bbdn[1] && rt[1].close<bbdn[1] && adx[1] > MaxADX)
      return(bEntry ? ORDER_TYPE_SELL:ORDER_TYPE_BUY); // condition for selll

   return(WRONG_VALUE); // if there is no signal
}

CMyEA ea; // class instance


//------------------------------------------------------------------    OnInit
int OnInit()
{
   ea.Init(Symbol(),Period()); // initialize expert

                                 // initialization example
   // ea.Init(Symbol(), PERIOD_M5); // for fixed timeframe
   // ea.Init("USDJPY", PERIOD_H2); // for fixed symbol and timeframe

   return(0);
}

//------------------------------------------------------------------    OnDeinit
void OnDeinit(const int reason) { }

//------------------------------------------------------------------    OnTick
void OnTick()
{
   ea.Main(); // process incoming tick
}
//+------------------------------------------------------------------+
